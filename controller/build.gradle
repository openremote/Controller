apply plugin: "war"

ext {
    testWebApplicationFolder = 'build/testcontainer/war'
    testWebServerBase = 'https://designer-test.openremote.com'
    dockerImageName = "$dockerRepository/controller:$imageVersion".toString()
}

configurations {
    staticLibraries
	
	compile.exclude module: 'or-controller'
}

repositories {
    // OR repository must be defined first so that specific version of drools-compiler is found
    maven {
        url "http://m2repo.openremote.com/content/groups/public/"
    }
    jcenter();
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            if (project.hasProperty("targetEnv")) {
                srcDir "src/$targetEnv/java"
            }
        }
    }
}

dependencies {
    compile "org.openremote:or-commons:0.3.1"
    compile "org.openremote:or-security:0.2.0"
    compile "org.openremote:or-logging:0.1.0"

    compile "org.cybergarage.upnp:cybergarage-upnp:1.7.0"

    compile "org.bidib.com.neuronrobotics:nrjavaserial:$nrjavaserialVersion"

    compile "antlr:antlr:$antlrVersion"
    compile "org.antlr:antlr-runtime:$antlrRuntimeVersion"
    compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
    compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    compile "commons-beanutils:commons-beanutils:$commonsBeanUtilsVersion"
    compile "org.apache.commons:commons-exec:$commonsExecVersion"
    compile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    compile "commons-net:commons-net:$commonsNetVersion"
    compile "io.netty:netty-all:4.1.6.Final"

    compile "org.kie:kie-api:$droolsVersion"
    compile "org.drools:drools-compiler:$droolsVersion"
    compile "org.drools:drools-core:$droolsVersion"
    compile "org.drools:drools-decisiontables:$droolsVersion"

    compile "org.eclipse.jdt.core.compiler:ecj:$ecjVersion"
    compile "net.sf.flexjson:flexjson:$flexjsonVersion"
    compile "org.apache.httpcomponents:httpclient:$httpclientVersion"
    compile "jaxen:jaxen:1.1-beta-9"
    compile "jdom:jdom:$jdomVersion"
    compile "org.owfs:jowfsclient:$jowfsclientVersion"
    compile "com.jayway.jsonpath:json-path:$jsonpathVersion"
    compile "org.zeromq:jzmq:$jzmqVersion" // Not sure what version we're using, seems older
    compile "log4j:log4j:$log4jVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "org.mvel:mvel2:$mvel2Version"
    compile "org.quartz-scheduler:quartz:$quartzVersion"
    compile "org.restlet.jse:org.restlet:$restletVersion"
    compile "org.restlet.jse:org.restlet.ext.json:$restletVersion"
    compile "org.rrd4j:rrd4j:$rrd4jVersion"
    compile "com.luckycatlabs:SunriseSunsetCalculator:$sunriseSunsetVersion" // Upgrade from 1.0 to 1.1

    compile "org.springframework:spring:$springVersion"
    compile "org.springframework.security:spring-security-core:$springSecurityVersion"

    compile "org.openremote:velbus:$velbusVersion"
    compile "org.openremote:or-zwave:$zwaveVersion"

    // These dependencies were in controller
    // but not sure they're still required
//    compile files("lib/json/json-20110113.jar")
//    compile "jstl:jstl:1.1.2"
//    compile taglibs:standard:1.1.2"

    providedCompile "javax.servlet:servlet-api:$servletVersion"
    providedCompile "javax.servlet.jsp:jsp-api:$jspVersion"

    testCompile "org.dbunit:dbunit:$dbunitVersion"
    testCompile "httpunit:httpunit:$httpunitVersion"
    testCompile "org.mortbay.jetty:jetty:$jettyVersion"
    testCompile "junit:junit:$junitVersion"
	testCompile "org.mockito:mockito-core:$mockitoVersion"
}

task prepareTestFolder(type: Copy, dependsOn: war) {
    description 'Creates an exploded web application folder, with test specific configuration files and test fixtures included'
    destinationDir = new File("$testWebApplicationFolder")
    outputs.dir destinationDir
    
    with war
    from('src/test/java') {
        include '**/*.xml'
        include '**/*.xls'
        include '**/*.csv'
        include '**/*.drl'
        into ('WEB-INF/classes')
    }
    from('src/test/webapp') {
        into ('WEB-INF/classes')
    }   
}

war {
    if (project.hasProperty("targetEnv")) {
        into("WEB-INF") {
            from("src/$targetEnv/webapp/WEB-INF/web.xml")
        }
    }
}

task startTestContainer(dependsOn: [prepareTestFolder, compileTestJava])

startTestContainer.doFirst {
    description 'Start embedded Jetty container with test configuration'

    Properties props = new Properties()
    props.load(new FileInputStream(file("$testWebApplicationFolder/WEB-INF/classes/config.properties")))

    test.systemProperties = [
        /*
         * Let the unit test JVM know the 'resource.path' configuration property value of the
         * test container's deployed controller.war
         */
        'testcontainer.vm.resource.path':  props['resource.path'],

        /*
         * These properties must be set to correctly resolve in the Spring configuration file.
         * Eventually, this should not rely on a public server but be part of the local test setup.
         */
        'openremote.sync.service.uri' : "$testWebServerBase/beehive/rest/",
        'openremote.remote.command.service.uri' : "$testWebServerBase/ccs/rest/",
        'openremote.remote.command.service.ws.uri' : "$testWebServerBase/ccs/ws-commands/",
        'openremote.controller.id' : '1',
        'openremote.device.discovery.service.uri' : "$testWebServerBase/dds/rest/",

        /*
         * Pass a system property that gives tests that need access to the compiled
         * test class directory (which contains fixture files) as an absolute file path
         */
        'classes.dir' : file("$testWebApplicationFolder/WEB-INF/classes").path
     ] 

    /*
     * Set the test container VM work directory inside the war directory. This ensures
     * relative paths from within test container war's config.properties are resolved
     * within the testcontainer directory structure.
     */
    ant.java(fork: true,
             spawn: true,
             classname: 'org.openremote.controller.jetty.JettyStart',
             classpath: (sourceSets.test.runtimeClasspath + files("$testWebApplicationFolder/WEB-INF/classes")).asPath,
             dir: testWebApplicationFolder) {
                sysproperty(key: 'openremote.sync.service.uri', value : "$testWebServerBase/beehive/rest/")
                sysproperty(key: 'openremote.remote.command.service.uri', value : "$testWebServerBase/ccs/rest/")
                sysproperty(key: 'openremote.controller.id', value : '1')
                sysproperty(key: 'openremote.device.discovery.service.uri', value : "$testWebServerBase/dds/rest/")
    }
}

task stopTestContainer
stopTestContainer.doFirst {
    ant.java(classname : 'org.openremote.controller.jetty.JettyStop',
             classpath : sourceSets.test.runtimeClasspath.asPath)
}

test.dependsOn startTestContainer
test.finalizedBy stopTestContainer
test {
    /*
     * Run JUnit VM with the same work directory as the test container war. Notice
     * the tests themselves aren't actually running inside a container. This is
     * temporary until the search paths for resources have been sorted out to not mix
     * the test container and junit test resource files.
     */
    workingDir = new File(testWebApplicationFolder)
    classpath = sourceSets.test.runtimeClasspath + files("$testWebApplicationFolder/WEB-INF/classes")
    
    scanForTestClasses = false
    include '**/AllTests.class'
}

// Code related to building a controller distribution

configurations {
  webconsole
}

dependencies {
  webconsole "org.openremote:webconsole:2.1.5"
}

task copyWebconsole(type: Copy) {
  from configurations.webconsole
  into "${buildDir}/tempController/$project.name/webapps"
  rename { 'webconsole.war' }
}

task temporaryControllerDirectory(type: Copy, dependsOn: [assemble, copyWebconsole]) {
    destinationDir = file("${buildDir}/tempController")
    from('runtime/apache-tomcat-6.0.18') {
        into project.name
    }
    into("$project.name/webapps/controller") {
        with war
    }
}

task controller(type: Zip, dependsOn: temporaryControllerDirectory) 

controller.doFirst {
    ant.chmod(file:"${buildDir}/tempController/${project.name}/bin/openremote.sh" , perm: "u+x")
}

controller {
    description 'Creates a zip distribution of the controller runtime, including Tomcat'

    from("${buildDir}/tempController/$project.name") {
		    into project.name
		}
}

// Code related to building Docker image

task sampleControllerConfig(type: Copy) {
    destinationDir = file("${buildDir}/tempController")
		from('sample') {
		    into 'or-resources'
		}
}

task dockerControllerTar(type: Tar, dependsOn: [temporaryControllerDirectory, sampleControllerConfig])

dockerControllerTar.doFirst {
    ant.chmod(file:"${buildDir}/tempController/${project.name}/bin/openremote.sh" , perm: "u+x")
    
    String contents = new File("${buildDir}/tempController/${project.name}/webapps/controller/WEB-INF/classes/config.properties").getText('UTF-8')
    contents = contents.replaceAll('resource.path=../webapps/controller', 'resource.path=/opt/or-resources')
    new File("${buildDir}/tempController/${project.name}/webapps/controller/WEB-INF/classes/config.properties").write(contents, 'UTF-8')
}

dockerControllerTar
{
    description 'Prepares a tar image to be deployed to docker image'

    destinationDir = file("${buildDir}/install")
    from(file("${buildDir}/tempController"))
}

apply plugin: 'com.bmuschko.docker-remote-api'

docker {
  url = dockerHostUrl()
  certPath = dockerCertPath()
  registryCredentials {
        username = project.properties.dockerHubUsername
        password = project.properties.dockerHubPassword
    }
}

URI dockerHostEnv() {
  String uri = System.getenv('DOCKER_HOST')
  uri ? new URI(uri) : null
}

String dockerHostUrl() {
  if (dockerHostEnv()) {
    URI uri = dockerHostEnv()
    if (uri.scheme == 'unix') {
      uri
    } else if (uri.scheme == 'tcp') {
      (new URI(uri.scheme != 'tcp' ?: 'https' , uri.userInfo, uri.host, uri.port, uri.path, uri.query, uri.fragment)).toString()
    }
  } else {
    org.gradle.internal.os.OperatingSystem.current().isLinux() ? 'unix:///var/run/docker.sock' : 'http://localhost:2375'
  }
}

File dockerCertPath() {
  String certPathEnv = System.getenv('DOCKER_CERT_PATH')
  certPathEnv ? file(certPathEnv) : null;
}

import com.bmuschko.gradle.docker.tasks.image.*

task createDockerfile(type: Dockerfile) {
    destFile = project.file("$project.buildDir/install/Dockerfile")
    from "java:8"

    maintainer 'OpenRemote <support@openremote.org>'

    runCommand 'apt-get update && apt-get -y install netcat'

    // We're adding a tar instead of a folder structure,
    // otherwise empty folders (all tomcat logs folders) where not present on image
    addFile project(':OpenRemote-Controller').dockerControllerTar.archiveName, "/opt"

    runCommand 'groupadd -r openremote && useradd -r -g openremote openremote && chown -R openremote.openremote /opt/OpenRemote-Controller && chown -R openremote.openremote /opt/or-resources'

    exposePort 8688

    user 'openremote'

    // TODO Weird permission problems with this if you touch any of these files in a sub-image build
    // TODO Maybe we run into https://github.com/docker/docker/issues/783
    // volume "/opt/or-resources"
    
    workingDir "/opt/OpenRemote-Controller/bin"
    entryPoint "/opt/OpenRemote-Controller/bin/openremote.sh"
    defaultCommand "run"
}

task buildImage(type: DockerBuildImage) {
    dependsOn ":OpenRemote-Controller:dockerControllerTar", createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = dockerImageName
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    imageName = dockerImageName
}
